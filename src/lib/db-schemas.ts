/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./supabase-types";

export const publicTitleStatusSchema = z.union([
  z.literal("permanent"),
  z.literal("part-time"),
  z.literal("seasonal"),
  z.literal("provisional"),
  z.literal("volunteer"),
]);

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.string(), z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const publicEmployeeTitlesRowSchema = z.object({
  created_at: z.string(),
  employee_id: z.string(),
  end_date: z.string().nullable(),
  id: z.string(),
  modified_at: z.string(),
  start_date: z.string(),
  title_id: z.string(),
  title_status: publicTitleStatusSchema,
});

export const publicEmployeeTitlesInsertSchema = z.object({
  created_at: z.string().optional(),
  employee_id: z.string(),
  end_date: z.string().optional().nullable(),
  id: z.string().optional(),
  modified_at: z.string().optional(),
  start_date: z.string(),
  title_id: z.string(),
  title_status: publicTitleStatusSchema,
});

export const publicEmployeeTitlesUpdateSchema = z.object({
  created_at: z.string().optional(),
  employee_id: z.string().optional(),
  end_date: z.string().optional().nullable(),
  id: z.string().optional(),
  modified_at: z.string().optional(),
  start_date: z.string().optional(),
  title_id: z.string().optional(),
  title_status: publicTitleStatusSchema.optional(),
});

export const publicEmployeeTitlesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("employee_titles_employee_id_fkey"),
    columns: z.tuple([z.literal("employee_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("employees"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("employee_titles_title_id_fkey"),
    columns: z.tuple([z.literal("title_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("titles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicEmployeesRowSchema = z.object({
  birth_date: z.string(),
  cell_phone: z.string().nullable(),
  created_at: z.string(),
  csc_id: z.string().nullable(),
  email_address: z.string().nullable(),
  first_name: z.string(),
  home_address: z.string(),
  home_phone: z.string().nullable(),
  id: z.string(),
  is_default_cto: z.boolean(),
  last_name: z.string(),
  mailing_address: z.string().nullable(),
  middle_name: z.string().nullable(),
  modified_at: z.string(),
  pers_membership_number: z.string().nullable(),
  pers_tier: z.string().nullable(),
  photo_url: z.string().nullable(),
  ssn_hash: z.string(),
  user_id: z.string().nullable(),
});

export const publicEmployeesInsertSchema = z.object({
  birth_date: z.string(),
  cell_phone: z.string().optional().nullable(),
  created_at: z.string().optional(),
  csc_id: z.string().optional().nullable(),
  email_address: z.string().optional().nullable(),
  first_name: z.string(),
  home_address: z.string(),
  home_phone: z.string().optional().nullable(),
  id: z.string().optional(),
  is_default_cto: z.boolean().optional(),
  last_name: z.string(),
  mailing_address: z.string().optional().nullable(),
  middle_name: z.string().optional().nullable(),
  modified_at: z.string().optional(),
  pers_membership_number: z.string().optional().nullable(),
  pers_tier: z.string().optional().nullable(),
  photo_url: z.string().optional().nullable(),
  ssn_hash: z.string(),
  user_id: z.string().optional().nullable(),
});

export const publicEmployeesUpdateSchema = z.object({
  birth_date: z.string().optional(),
  cell_phone: z.string().optional().nullable(),
  created_at: z.string().optional(),
  csc_id: z.string().optional().nullable(),
  email_address: z.string().optional().nullable(),
  first_name: z.string().optional(),
  home_address: z.string().optional(),
  home_phone: z.string().optional().nullable(),
  id: z.string().optional(),
  is_default_cto: z.boolean().optional(),
  last_name: z.string().optional(),
  mailing_address: z.string().optional().nullable(),
  middle_name: z.string().optional().nullable(),
  modified_at: z.string().optional(),
  pers_membership_number: z.string().optional().nullable(),
  pers_tier: z.string().optional().nullable(),
  photo_url: z.string().optional().nullable(),
  ssn_hash: z.string().optional(),
  user_id: z.string().optional().nullable(),
});

export const publicPayPeriodsRowSchema = z.object({
  begin_date: z.string(),
  created_at: z.string(),
  end_date: z.string(),
  id: z.string(),
  modified_at: z.string(),
  pay_date: z.string(),
  pay_period_number: z.number(),
  payroll_year: z.number(),
});

export const publicPayPeriodsInsertSchema = z.object({
  begin_date: z.string(),
  created_at: z.string().optional(),
  end_date: z.string(),
  id: z.string().optional(),
  modified_at: z.string().optional(),
  pay_date: z.string(),
  pay_period_number: z.number(),
  payroll_year: z.number(),
});

export const publicPayPeriodsUpdateSchema = z.object({
  begin_date: z.string().optional(),
  created_at: z.string().optional(),
  end_date: z.string().optional(),
  id: z.string().optional(),
  modified_at: z.string().optional(),
  pay_date: z.string().optional(),
  pay_period_number: z.number().optional(),
  payroll_year: z.number().optional(),
});

export const publicPermissionsRowSchema = z.object({
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
});

export const publicPermissionsInsertSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string(),
});

export const publicPermissionsUpdateSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
});

export const publicStartingBalancesRowSchema = z.object({
  created_at: z.string().nullable(),
  employee_id: z.string(),
  id: z.string(),
  modified_at: z.string().nullable(),
  payroll_year: z.number(),
  starting_balance: z.number(),
  time_type_id: z.string(),
});

export const publicStartingBalancesInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  employee_id: z.string(),
  id: z.string().optional(),
  modified_at: z.string().optional().nullable(),
  payroll_year: z.number(),
  starting_balance: z.number().optional(),
  time_type_id: z.string(),
});

export const publicStartingBalancesUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  employee_id: z.string().optional(),
  id: z.string().optional(),
  modified_at: z.string().optional().nullable(),
  payroll_year: z.number().optional(),
  starting_balance: z.number().optional(),
  time_type_id: z.string().optional(),
});

export const publicStartingBalancesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("starting_balances_employee_id_fkey"),
    columns: z.tuple([z.literal("employee_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("employees"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("starting_balances_time_type_id_fkey"),
    columns: z.tuple([z.literal("time_type_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("time_types"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTimeTypesRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  is_paid: z.boolean(),
  type_name: z.string(),
  type_short_name: z.string(),
});

export const publicTimeTypesInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_paid: z.boolean(),
  type_name: z.string(),
  type_short_name: z.string(),
});

export const publicTimeTypesUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_paid: z.boolean().optional(),
  type_name: z.string().optional(),
  type_short_name: z.string().optional(),
});

export const publicTimesheetEmployeeTimesRowSchema = z.object({
  created_at: z.string(),
  hours_amount: z.number(),
  id: z.string(),
  modified_at: z.string(),
  time_type_id: z.string(),
  timesheet_employee_id: z.string(),
});

export const publicTimesheetEmployeeTimesInsertSchema = z.object({
  created_at: z.string().optional(),
  hours_amount: z.number().optional(),
  id: z.string().optional(),
  modified_at: z.string().optional(),
  time_type_id: z.string(),
  timesheet_employee_id: z.string(),
});

export const publicTimesheetEmployeeTimesUpdateSchema = z.object({
  created_at: z.string().optional(),
  hours_amount: z.number().optional(),
  id: z.string().optional(),
  modified_at: z.string().optional(),
  time_type_id: z.string().optional(),
  timesheet_employee_id: z.string().optional(),
});

export const publicTimesheetEmployeeTimesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("timesheet_employee_times_time_type_id_fkey"),
    columns: z.tuple([z.literal("time_type_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("time_types"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "timesheet_employee_times_timesheet_employee_id_fkey",
    ),
    columns: z.tuple([z.literal("timesheet_employee_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("timesheet_employees"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTimesheetEmployeesRowSchema = z.object({
  created_at: z.string(),
  employee_id: z.string(),
  id: z.string(),
  is_late: z.boolean(),
  modified_at: z.string(),
  notes: z.string().nullable(),
  timesheet_id: z.string(),
});

export const publicTimesheetEmployeesInsertSchema = z.object({
  created_at: z.string().optional(),
  employee_id: z.string(),
  id: z.string().optional(),
  is_late: z.boolean().optional(),
  modified_at: z.string().optional(),
  notes: z.string().optional().nullable(),
  timesheet_id: z.string(),
});

export const publicTimesheetEmployeesUpdateSchema = z.object({
  created_at: z.string().optional(),
  employee_id: z.string().optional(),
  id: z.string().optional(),
  is_late: z.boolean().optional(),
  modified_at: z.string().optional(),
  notes: z.string().optional().nullable(),
  timesheet_id: z.string().optional(),
});

export const publicTimesheetEmployeesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("timesheet_employees_employee_id_fkey"),
    columns: z.tuple([z.literal("employee_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("employees"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("timesheet_employees_timesheet_id_fkey"),
    columns: z.tuple([z.literal("timesheet_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("timesheets"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTimesheetsRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  modified_at: z.string(),
  notes: z.string().nullable(),
  pay_period_id: z.string(),
  timesheet_date: z.string(),
});

export const publicTimesheetsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  modified_at: z.string().optional(),
  notes: z.string().optional().nullable(),
  pay_period_id: z.string(),
  timesheet_date: z.string(),
});

export const publicTimesheetsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  modified_at: z.string().optional(),
  notes: z.string().optional().nullable(),
  pay_period_id: z.string().optional(),
  timesheet_date: z.string().optional(),
});

export const publicTimesheetsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("timesheets_pay_period_id_fkey"),
    columns: z.tuple([z.literal("pay_period_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("pay_periods"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTitlesRowSchema = z.object({
  created_at: z.string(),
  csc_code: z.string(),
  csc_description_url: z.string().nullable(),
  id: z.string(),
  is_clerical: z.boolean(),
  is_salaried: z.boolean(),
  maximum_annual_salary: z.number().nullable(),
  minimum_annual_salary: z.number().nullable(),
  modified_at: z.string(),
  title_description_url: z.string().nullable(),
  title_name: z.string(),
});

export const publicTitlesInsertSchema = z.object({
  created_at: z.string().optional(),
  csc_code: z.string(),
  csc_description_url: z.string().optional().nullable(),
  id: z.string().optional(),
  is_clerical: z.boolean().optional(),
  is_salaried: z.boolean().optional(),
  maximum_annual_salary: z.number().optional().nullable(),
  minimum_annual_salary: z.number().optional().nullable(),
  modified_at: z.string().optional(),
  title_description_url: z.string().optional().nullable(),
  title_name: z.string(),
});

export const publicTitlesUpdateSchema = z.object({
  created_at: z.string().optional(),
  csc_code: z.string().optional(),
  csc_description_url: z.string().optional().nullable(),
  id: z.string().optional(),
  is_clerical: z.boolean().optional(),
  is_salaried: z.boolean().optional(),
  maximum_annual_salary: z.number().optional().nullable(),
  minimum_annual_salary: z.number().optional().nullable(),
  modified_at: z.string().optional(),
  title_description_url: z.string().optional().nullable(),
  title_name: z.string().optional(),
});

export const publicUserPermissionsRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  permission_name: z.string(),
  user_id: z.string(),
});

export const publicUserPermissionsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  permission_name: z.string(),
  user_id: z.string(),
});

export const publicUserPermissionsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  permission_name: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicUserPermissionsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("user_permissions_permission_name_fkey"),
    columns: z.tuple([z.literal("permission_name")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("permissions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicDecryptSsnArgsSchema = z.object({
  p_data: z.string(),
});

export const publicDecryptSsnReturnsSchema = z.string();

export const publicEmployeeUserIdArgsSchema = z.object({
  p_employee_id: z.string(),
});

export const publicEmployeeUserIdReturnsSchema = z.string();

export const publicGetEmployeeIdArgsSchema = z.object({});

export const publicGetEmployeeIdReturnsSchema = z.string();

export const publicHasPermissionArgsSchema = z.object({
  p_permission_name: z.string(),
});

export const publicHasPermissionReturnsSchema = z.boolean();

export const publicVerifyTimesheetDateArgsSchema = z.object({
  p_pay_period_id: z.string(),
  p_timesheet_date: z.string(),
});

export const publicVerifyTimesheetDateReturnsSchema = z.boolean();
